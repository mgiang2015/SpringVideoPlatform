package com.mgiang2015.SpringVideoPlatform.controller;

import java.io.IOException;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.mgiang2015.SpringVideoPlatform.repository.ChapterRepository;
import com.mgiang2015.SpringVideoPlatform.services.VideoMongodbService;

import jakarta.servlet.http.HttpServletResponse;

import com.mgiang2015.SpringVideoPlatform.exception.ChapterNotFoundException;
import com.mgiang2015.SpringVideoPlatform.model.Chapter;
import com.mgiang2015.SpringVideoPlatform.model.VideoData;

@RestController
public class ChapterController {
    @Autowired
    private ChapterRepository repository;
    @Autowired
    private VideoMongodbService service;

    @GetMapping("/chapters")
    public List<Chapter> all() {
        return repository.findAll();
    }

    @PostMapping("/chapters")
    public Chapter newChapter(@RequestParam("title") String title, @RequestParam("file") MultipartFile file) throws IOException {
        String id = service.addVideo(file);
        Chapter newChapter = new Chapter();
        newChapter.setTitle(title);
        newChapter.setId(id); // video id generated by mongodb. Might have to change this later

        return repository.save(newChapter);
    }

    @GetMapping("/chapters/{id}")
    public Chapter one(@PathVariable String id) {
        return repository.findById(id)
        .orElseThrow(() -> new ChapterNotFoundException(id));
    }
    
    @GetMapping("/chapters/stream/{id}")
    public void streamVideo(@PathVariable String id, HttpServletResponse response) throws IOException {
        VideoData data = service.getVideo(id);
        response.addHeader("Content-Type", "video/mp4");
        FileCopyUtils.copy(data.getStream(), response.getOutputStream());
    }

    @PutMapping("/chapters/{id}")
    public Chapter replaceChapter(@RequestBody Chapter newChapter, @PathVariable String id) {
        return repository.findById(id)
        .map(chapter -> {
            chapter.setTitle(newChapter.getTitle()); // update in SQL
            return repository.save(chapter);
        }).orElseGet(() -> {
            newChapter.setId(id);
            return repository.save(newChapter);
        });
    }

    @DeleteMapping("/chapters/{id}")
    public void deleteChapter(@PathVariable String id) {
        // Delete from mongodb first
        service.deleteVideo(id);
        repository.deleteById(id);
    }

    @DeleteMapping("/chapters/all")
    public void deleteAllChapters() {
        List<Chapter> allChapters = repository.findAll();
        for (Chapter chapter : allChapters) {
            service.deleteVideo(chapter.getId());
            repository.deleteById(chapter.getId());
        }
    }
}
